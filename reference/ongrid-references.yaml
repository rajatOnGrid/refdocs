openapi: 3.0.1
info:
  title: Reference Records - APIs
  description: "## HOW IT WORKS\n\n- **Integrate APIs**\nAPIs to read and write references that can be integrated with the HRMS, Onboarding or Exit management systems. References can also be written and read using a web portal.\n\n\n- **Write reference**\nUsers can provide basic details like Name, ID, Date of Birth, Mobile number, and can write a reference  while deboarding an employee / contractor / provider / platform partner.\n\n- **Read reference**\nBased on a unique combination of basic details i.e. Name, ID, Date of Birth, and Mobile number, system will search for references written. If found, user can view reference and also download the reference report from the portal. \n\n\n\n**Pre-configured tags for anchor organizations**\n\n| **Tag ID** | **Tag Text**                                 | **Tag ID** | **Tag Text**                                                             |\n| ---------- | -------------------------------------------- | ---------- | ------------------------------------------------------------------------ |\n| 10001      | Normal or usual exit / deboarding            | 20001      | Not recommended                                                          |\n| 10002      | Highly recommended                           | 20002      | Not eligible for re-hire                                                 |\n| 10003      | Recommended                                  | 20003      | Deboarded and / or fired by us                                           |\n| 10004      | Eligible for re-hire, and / or re-onboarding | 20004      | Blacklisted by us                                                        |\n| 10005      | Very hardworking                             | 20005      | Absconding                                                               |\n| 10006      | Very good communication skills               | 20006      | Absconding after company policy violation                                |\n| 10007      | Very strong analytical ability               | 20007      | Absconding after severe company policy violation                         |\n| 10008      | Very disciplined                             | 20008      | Absconding after abusive and / or violent incident                       |\n| 10009      | Highly ethical                               | 20009      | Absconding with company inventory                                        |\n| 10010      | Hardworking                                  | 20010      | Incident (s) of abusive or violent behavior                              |\n| 10011      | Good communication skills                    | 20011      | Incident (s) of company policy violations                                |\n| 10012      | Strong analytical ability                    | 20012      | Incident(s) of fraud or forgery                                          |\n| 10013      | Disciplined                                  | 20013      | Incident(s) of theft                                                     |\n| 10014      | Ethical                                      | 20014      | Incident(s) of customer / end-user harassment                            |\n| 10015      | Was a great asset to our organization        | 20015      | Incident(s) of sexual harassment                                         |\n| 10016      | Very quick learner                           | 20016      | Incident(s) of violent crime                                             |\n| 10017      | Quick learner                                | 20017      | Severe incident of customer / end-user harassment                        |\n| 10018      | Highly committed to our organization growth  | 20018      | Severe incident of sexual harassment                                     |\n| 10019      | Committed to our organization growth         | 20019      | Incident(s) of violating privacy of co-workers or customer / end-user    |\n| 10020      | Has the ability to get things done           | 20020      | Frequent complaints from customer(s) / end-user(s)                       |\n| 10021      | Creates a positive atmosphere at workplace   | 20021      | Frequent complaints from co-workers / other employees or peers           |\n| 10022      | Helps and coaches peers and juniors          | 20022      | Incident(s) of threat(s) made to customer(s) / end-user(s)               |\n| 10023      | Highly efficient                             | 20023      | Severe incident of violent crime                                         |\n| 10024      | Efficient                                    | 20024      | Incident(s) of threat(s) made to co-workers / other employees or peers   |\n| 10025      | Great people skills                          | 20025      | Incident(s) of indecent or lewd behavior                                 |\n| 10026      | Good people skills                           | 20026      | Incident(s) of indecent or lewd behavior targeted at customer / end-user |\n| 10027      | Very high quality work                       | 20027      | One or more performance issue(s)                                         |\n| 10028      | High quality work                            | 20028      | One or more integrity-related issue(s)                                   |\n| 10029      | Very high speed of execution                 | 20029      | One or more discipline-related issue(s)                                  |\n| 10030      | High speed of execution                      | 20030      | Did not serve notice period                                              |"
  termsOfService: 'https://ongrid.in/#/tnc'
  contact:
    name: Piyush
    email: contact@ongrid.in
    url: 'https://ongrid.in/'
  version: v1.0
servers:
  - url: 'https://api.ongrid.in'
    description: URL
paths:
  /app/v1/records/publish:
    post:
      summary: Publish a new reference record
      description: ''
      operationId: writeRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteRequest'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObjectWriteResponse'
        '400':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
        '500':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
      tags:
        - Reference Record
  /app/v1/records/revise:
    post:
      summary: Update an existing reference record
      operationId: updateRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObjectWriteResponse'
        '400':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
        '500':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
      tags:
        - Reference Record
  /app/v1/records/search:
    post:
      summary: Search for a reference record
      operationId: searchRecords
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObjectSearchResponse'
        '400':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
        '500':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
      tags:
        - Reference Record
  /app/v1/records/fetch:
    post:
      summary: Read a reference record
      operationId: readRecords
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadRequest'
      responses:
        '200':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObjectReadResponse'
        '400':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
        '500':
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseObject'
      tags:
        - Reference Record
components:
  schemas:
    ResponseObject:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        data:
          type: object
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        errorMessage:
          type: string
      title: Response Object
    PersonalTrait:
      type: object
      properties:
        Hardwork:
          type: string
          enum:
            - VeryHigh
            - High
            - Medium
            - Low
            - VeryLow
        AnalyticalAbility:
          type: string
          enum:
            - VeryHigh
            - High
            - Medium
            - Low
            - VeryLow
        Discipline:
          type: string
          enum:
            - VeryHigh
            - High
            - Medium
            - Low
            - VeryLow
        Communication:
          type: string
          enum:
            - VeryHigh
            - High
            - Medium
            - Low
            - VeryLow
        Integrity:
          type: string
          enum:
            - VeryHigh
            - High
            - Medium
            - Low
            - VeryLow
      description: For more detail refer to Reference record JSON Schema
      title: Personal Trait (part of reference record)
    ReferenceRecord:
      required:
        - entityName
        - tagId
        - writerDesignation
        - writerName
      type: object
      properties:
        associationFromDate:
          type: string
        associationToDate:
          type: string
        associationType:
          type: string
          enum:
            - Employee
            - Contractor
            - ServiceProvider
            - PlatformPartner
            - Other
        profession:
          maxLength: 100
          minLength: 3
          type: string
        tagId:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            type: string
            enum:
              - '10001'
              - '10002'
              - '10003'
              - '10004'
              - '10005'
              - '10006'
              - '10007'
              - '10008'
              - '10009'
              - '10010'
              - '10011'
              - '10012'
              - '10013'
              - '10014'
              - '10015'
              - '10016'
              - '10017'
              - '10018'
              - '10019'
              - '10020'
              - '10021'
              - '10022'
              - '10023'
              - '10024'
              - '10025'
              - '10026'
              - '10027'
              - '10028'
              - '10029'
              - '10030'
              - '20001'
              - '20002'
              - '20003'
              - '20004'
              - '20005'
              - '20006'
              - '20007'
              - '20008'
              - '20009'
              - '20010'
              - '20011'
              - '20012'
              - '20013'
              - '20014'
              - '20015'
              - '20016'
              - '20017'
              - '20018'
              - '20019'
              - '20020'
              - '20021'
              - '20022'
              - '20023'
              - '20024'
              - '20025'
              - '20026'
              - '20027'
              - '20028'
              - '20029'
              - '20030'
        longReference:
          maxLength: 500
          minLength: 20
          type: string
        personalTraits:
          maxItems: 2147483647
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PersonalTrait'
        entityName:
          maxLength: 100
          minLength: 3
          type: string
        shortName:
          maxLength: 100
          minLength: 3
          type: string
        writerName:
          maxLength: 100
          minLength: 3
          type: string
        writerDesignation:
          maxLength: 100
          minLength: 3
          type: string
      title: Reference Record
      description: For more detail refer to Reference record JSON Schema
    UnificationParamsDTO:
      type: object
      title: Personal Identifiable Information
      description: |-
        Used to identify person, against whom record is being written or searched. Currently supported values are:

        |  Name | Value Fomat  |
        | ------------ | ------------ |
        |   NAME | Without saluation |
        |   DOB | YYYYMMDD |
        |   PHONE | 10 digit mobile number |
        |   PAN | Valid PAN ID |
        |   PP | Valid Passport ID |
        |   DL | Valid Driving License ID |
        |   VID | Valid Voter Card ID |
      properties:
        name:
          type: string
          enum:
            - NAME
            - DOB
            - PAN
            - VID
            - PP
            - AN
            - PHONE
            - DL
        value:
          type: string
          minLength: 1
        metadata:
          type: object
          additionalProperties:
            type: object
      required:
        - name
        - value
    WriteRequest:
      required:
        - consentText
        - criteria
        - hasConsent
        - record
        - schemaCode
      type: object
      properties:
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/UnificationParamsDTO'
        record:
          $ref: '#/components/schemas/ReferenceRecord'
        schemaCode:
          type: string
          enum:
            - REF
            - EMP
        consentText:
          type: string
        hasConsent:
          type: boolean
      title: Write Request
      description: |
        ***schemaCode*** must be **REF**

        ***record*** should be a valid (JSON against schema)[https://stoplight.io/p/docs/gh/rajatongrid/refdocs/models/reference-schema.json]
    ResponseObjectWriteResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/WriteResponse'
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        errorMessage:
          type: string
    WriteResponse:
      type: object
      title: Write Response
      description: Response for write record API
      properties:
        recordId:
          type: string
          description: Id of the record published
        recordVersion:
          type: integer
          format: int32
          description: Version of the record published
        schemaCode:
          type: string
          description: Schema code of the record published
        schemaVersion:
          type: integer
          format: int32
          description: Schema version of the record published
    UpdateRequest:
      required:
        - consentText
        - hasConsent
        - record
        - recordId
      type: object
      properties:
        record:
          $ref: '#/components/schemas/ReferenceRecord'
        recordId:
          type: string
        consentText:
          type: string
        hasConsent:
          type: boolean
      title: Update Request
    SearchRequest:
      required:
        - consentText
        - criteria
        - hasConsent
        - schemaCodes
      type: object
      properties:
        criteria:
          type: array
          items:
            $ref: '#/components/schemas/UnificationParamsDTO'
        schemaCodes:
          type: array
          items:
            type: string
            enum:
              - REF
              - EMP
        consentText:
          type: string
        hasConsent:
          type: boolean
      title: Search Request
    ResponseObjectSearchResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/SearchResponse'
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        errorMessage:
          type: string
    SearchRecordResponse:
      type: object
      properties:
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        recordId:
          type: string
        cost:
          type: number
          format: float
      title: Search Record Response
    SearchResponse:
      type: object
      title: Search Response
      properties:
        searchId:
          type: string
          description: Search Id
        records:
          type: array
          items:
            $ref: '#/components/schemas/SearchRecordResponse'
    ReadRequest:
      type: object
      title: Read Request
      description: Parameters to be send to read one or multiple records
      properties:
        recordIds:
          type: array
          description: List of record-Id(s) from search API response
          items:
            type: string
        searchId:
          type: string
          description: Search Id rom response of Search API
        consentText:
          type: string
        hasConsent:
          type: boolean
      required:
        - recordIds
        - searchId
        - consentText
        - hasConsent
    ReadResponse:
      type: object
    ResponseObjectReadResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/ReadResponse'
        statusCode:
          type: integer
          format: int32
        errorCode:
          type: integer
          format: int32
        errorMessage:
          type: string
  securitySchemes:
    API Key - 1:
      type: http
      scheme: Basic
tags:
  - name: Reference Record
    description: description
  - name: Employment Record
    description: description
